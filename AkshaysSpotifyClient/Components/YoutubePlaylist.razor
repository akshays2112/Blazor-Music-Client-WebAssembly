@using Newtonsoft.Json
@using System.Net
@if (SingleYoutubePlaylist.Count > 0)
{
    <span title="Load or Refresh">
        <svg @onclick="@LoadYoutubePlaylistItems" fill="#FFFFFF" width="34" height="34">
            <path d="M9,10.2c0,0.9-5,4.3-5,0C4,4.4,7.8,0,13.8,0c0.2,0,0.2,0,0,0.1C12.9,0.8,9,2.5,9,10.2z" />
            <path d="M12.9 10.3c-.1-.2-.3-.3-.4-.3h-12c-.2 0-.4.1-.4.3C0 10.5 0 10.7.1 10.8l6 7.7c.1.1.2.2.4.2s.3-.1.4-.2l6-7.7C13 10.7 13 10.5 12.9 10.3zM17 15.8c0-.9 5-4.3 5 0 0 5.8-3.8 10.2-9.8 10.2-.2 0-.2 0 0-.1C13.1 25.2 17 23.5 17 15.8z" />
            <path d="M25.9,15.2l-6-7.7c-0.2-0.2-0.6-0.2-0.8,0l-6,7.7c-0.1,0.2-0.1,0.4-0.1,0.5c0.1,0.2,0.3,0.3,0.4,0.3h12c0.2,0,0.4-0.1,0.4-0.3C26,15.5,26,15.3,25.9,15.2z" />
            Sorry, your browser does not support inline SVG.
        </svg>
    </span>
}
@if (SingleYoutubePlaylist.MyPlayListItems.Count > 0)
{
    <span title="Expand or Collapse">
        <svg onclick="clickSvg('#@svgPathID')" width="34" height="34" transform="scale(0.735 0.735)" data-toggle="collapse" data-target="#@divID">
            <circle cx="17" cy="17" r="15" stroke="white" stroke-width="4" fill="none" />
            <path id="@svgPathID" d="M17 28 L8 18 L14 18 L14 8 L20 8 L20 18 L26 18 Z" fill="white" />
            Sorry, your browser does not support inline SVG.
        </svg>
    </span>
}
Playlist Title :: @SingleYoutubePlaylist.Title
@if (SingleYoutubePlaylist.MyPlayListItems.Count > 0)
{
    <div id="@divID" class="collapse show" style="margin-left:60px;">
        <table class="table table-dark">
            @foreach (MyPlaylist.MyPlayListItem myPlayListItem in SingleYoutubePlaylist.MyPlayListItems)
            {
                <tr>
                    <td>
                        <SearchSpotifyByYoutubeMusicVideoTitle YoutubePlaylistItem="@myPlayListItem" SpotifyUserPlayLists="@SpotifyUserPlayLists" />
                    </td>
                </tr>
            }
        </table>
    </div>
}
@code {
    [Parameter]
    public MyPlaylist SingleYoutubePlaylist { get; set; }


    string youtubeAccessToken;

    [Parameter]
    public List<UserPlaylist> SpotifyUserPlayLists { get; set; }

    HttpClient httpClient = new HttpClient { BaseAddress = Globals.BaseAddress };

    string divID = $"divID{(Globals.DivIndex++).ToString()}";
    string svgPathID = $"svgPathID{(Globals.DivIndex++).ToString()}";

    async Task<MyYoutubePlaylist> GetYoutubePlaylists<MyYoutubePlaylist>(string nextPageToken = null)
    {
        string part = WebUtility.UrlEncode("snippet,contentDetails");
        string pageToken = !string.IsNullOrWhiteSpace(nextPageToken) ? $"&page_token={nextPageToken}" : "";

        var builder = new UriBuilder($"https://www.googleapis.com/youtube/v3/playlistItems?access_token={youtubeAccessToken}&playlistId={SingleYoutubePlaylist.ID}&part={part}&maxResults=50{pageToken}");

        HttpResponseMessage request = await httpClient.GetAsync(builder.Uri);
        string response = await request.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<MyYoutubePlaylist>(response);
    }

    async Task<string> AddMyPlaylistItems(string nextPageToken = null)
    {
        MyYoutubePlaylist youtubePlaylist = await GetYoutubePlaylists<MyYoutubePlaylist>(nextPageToken);
        if (youtubePlaylist?.Items?.Length > 0)
        {
            foreach (Item item in youtubePlaylist.Items)
            {
                MyPlaylist.MyPlayListItem myPlaylistItem = new MyPlaylist.MyPlayListItem(item.Snippet.Title, item.Id);
                SingleYoutubePlaylist.MyPlayListItems.Add(myPlaylistItem);
            }
            return youtubePlaylist.NextPageToken;
        }
        return null;
    }

    async Task LoadYoutubePlaylistItems()
    {
        if (!string.IsNullOrWhiteSpace(Globals.GoogleApisYoutubeAccessToken?.access_token))
        {
            SingleYoutubePlaylist.MyPlayListItems = new List<MyPlaylist.MyPlayListItem>();
            youtubeAccessToken = Globals.GoogleApisYoutubeAccessToken.access_token;
            string nextPageToken = await AddMyPlaylistItems();
            while (!string.IsNullOrWhiteSpace(nextPageToken))
            {
                nextPageToken = await AddMyPlaylistItems(nextPageToken);
            }
        }

        await base.OnInitializedAsync();
    }
}
